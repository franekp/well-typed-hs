-- tokens (from least tight to most tight)

token RAppOp ( [".:"]? ({"<|"}|'$'|'@') )
  | ( [".:"]? ('$'|'@') ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token LPipeOp ( [".:"]? '|' )
  | ( [".:"]? '|' ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token LAndOp ( [".:"]? '&' )
  | ( [".:"]? '&' ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token RAssignOp [".:;"]? ["@#$%^&*-+.:;|"] '='+ ;

token RelOp [".:"]? ({"~"}|{"!="}|{"/="}|{"<"}|{"<="}|{">"}|{">="}|(('='|'~') ["~!@#$%^&*-+.:;|/<>="]+)) ;

token LAddOp ( [".:"]? ["+-"] )
  | ( [".:"]? ["+-"] ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token LMulOp ( [".:"]? ["*/%"] )  -- below exception: no "**" possible
  | ( [".:"]? ["*/%"] ["~!@#$%^&-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token RExpOp ( [".:"]? ({"^"}|{"**"}) )
  | ( [".:"]? ({"^"}|{"**"}) ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

token RComposeOp ( [".:"]? ({">>"}|{"<<"}) )
  | ( [".:"]? ({">>"}|{"<<"}) ["~!@#$%^&*-+.:;|/<>"] ["~!@#$%^&*-+.:;|/<>="]* ) ;

-- layout rules

layout "let", "begin", "object" ;
layout stop "in", "end" ;
layout toplevel ;

-- top level

Module. Module ::= [Def] ;

-- generic operators

AnyAppOp. AnyOp ::= RAppOp ;
AnyPipeOp. AnyOp ::= LPipeOp ;
AnyAndOp. AnyOp ::= LAndOp ;
AnyAssignOp. AnyOp ::= RAssignOp ;
AnyRelOp. AnyOp ::= RelOp ;
AnyAddOp. AnyOp ::= LAddOp ;
AnyMulOp. AnyOp ::= LMulOp ;
AnyExpOp. AnyOp ::= RExpOp ;
AnyComposeOp. AnyOp ::= RComposeOp ;

-- expressions

separator Expr ";" ;

ELet. Expr ::= "let" "{" [Def] "}" "in" Expr ;
ELetRec. Expr ::= "let" "rec" "{" [Def] "}" "in" Expr ;
ELambda. Expr ::= "fun" [Arg] "->" Expr ;
EObject. Expr ::= "object" "{" [Def] "}" ;
EIf. Expr ::= "if" Expr "then" Expr "else" Expr ;

EAppOp. Expr5 ::= Expr6 RAppOp Expr5 ;
EPipeOp. Expr6 ::= Expr6 LPipeOp Expr7 ;
EAndOp. Expr7 ::= Expr7 LAndOp Expr8 ;
EAssignOp. Expr8 ::= Expr9 RAssignOp Expr8 ;

ERelOp. Expr9 ::= Expr10 [RelExpr] ;

RelExpr. RelExpr ::= RelOp Expr10 ;
separator nonempty RelExpr "" ;

EAddOp. Expr10 ::= Expr10 LAddOp Expr11 ;
EMulOp. Expr11 ::= Expr11 LMulOp Expr12 ;
EExpOp. Expr12 ::= Expr13 RExpOp Expr12 ;
EComposeOp. Expr13 ::= Expr14 RComposeOp Expr13 ;

EBackticks. Expr14 ::= Expr14 "`" Ident "`" Expr15 ;

EApp. Expr18 ::= Expr18 Expr19 ;
EFieldAccess. Expr19 ::= Expr19 "." Ident ;

EVar. Expr20 ::= Ident ;
EOpVar. Expr20 ::= "(" AnyOp ")" ;
EPartialOp. Expr20 ::= "(" AnyOp Expr ")" ;
EInt. Expr20 ::= Integer ;
EString. Expr20 ::= String ;

EBlock. Expr20 ::= "begin" "{" [BlockExpr] "}" "end" ;
EList. Expr20 ::= "[" [ListItem] "]" ;
ETuple. Expr20 ::= "(" ListItem "," [ListItem] ")" ;
ERecord. Expr20 ::= "{" [RecordItem] "}" ;
ERecordUpdate. Expr20 ::= "{" Ident "|" [RecordItem] "}" ;
ECoerce. Expr20 ::= "(" Expr ":" Type ")" ;

coercions Expr 20 ;

-- expressions that can only occur inside a block

separator BlockExpr ";" ;
BlockExprId. BlockExpr ::= Expr ;
BlockExprBind. BlockExpr ::= Ident ":" TypeScheme "<-" Expr ;
BlockExprDef. BlockExpr ::= Ident "=" Expr ;

-- list items

separator ListItem "," ;
ListItem. ListItem ::= Expr ;

-- record items

separator RecordItem "," ;
--terminator RecordItem "," ;
RecordItem. RecordItem ::= Def ;

-- function arguments

separator Arg "" ;
Arg. Arg ::= "(" Ident ":" TypeScheme ")" ;

-- definitions

separator Def ";" ;
DVar. Def ::= Ident [Arg] "=" Expr ;
DOpVar. Def ::= "(" AnyOp ")" [Arg] "=" Expr ;
DOpen. Def ::= "open" Ident ;

-- types

terminator TypeV "." ;
TypeV. TypeV ::= Ident ;

TypeScheme. TypeScheme ::= [TypeV] Type ;

TArrow. Type ::= Type1 "->" Type ;

TBool. Type1 ::= "Bool" ;
TMaybe. Type1 ::= "Maybe" Type2 ;
TEither. Type1 ::= "Either" Type2 Type2 ;
TChar. Type1 ::= "Char" ;
TList. Type1 ::= "[" Type "]" ;
T_IO. Type1 ::= "IO" Type2 ;
TDynamic. Type1 ::= "Dynamic" ;
TUnit. Type1 ::= "(" ")" ;
TPair. Type1 ::= "(" Type "," Type ")" ;
TTriple. Type1 ::= "(" Type "," Type "," Type ")" ;

TRecord. Type3 ::= "{" Ident "|" [FieldAnnotation] "}" ;
TInt. Type3 ::= "Int" ;
TVar. Type3 ::= Ident ;

FieldAnnotation. FieldAnnotation ::= Ident ":" Type ;
separator FieldAnnotation "," ;

coercions Type 3 ;
