-- layout rules

layout "let", "begin", "object" ;
layout stop "in" ;
layout toplevel ;

-- top level

Module. Module ::= [Def] ;

-- expressions

separator Expr ";" ;

ELet. Expr ::= "let" "{" [Def] "}" "in" Expr ;
ELambda. Expr ::= "fun" [Arg] "->" Expr ;
EObject. Expr ::= "object" "{" [Def] "}" ;
EBlock. Expr ::= "begin" "{" [BlockExpr] "}" ;
EList. Expr ::= "[" [ListItem] "]" ;
ETuple. Expr ::= "(" ListItem "," [ListItem] ")" ;
ERecord. Expr ::= "{" [RecordItem] "}" ;

EAdd. Expr1 ::= Expr1 "+" Expr2 ;
ESub. Expr1 ::= Expr1 "-" Expr2 ;
EMul. Expr2 ::= Expr2 "*" Expr3 ;
EDiv. Expr2 ::= Expr2 "/" Expr3 ;

EApp. Expr5 ::= Expr5 Expr6 ;
EFieldAccess. Expr6 ::= Expr6 "." Ident ;

EVar. Expr7 ::= Ident ;
EInt. Expr7 ::= Integer ;
EString. Expr7 ::= String ;

coercions Expr 7 ;

-- expressions that can only occur inside a block

separator BlockExpr ";" ;
BlockExprId. BlockExpr ::= Expr ;
BlockExprBind. BlockExpr ::= Ident "<-" Expr ;
BlockExprDef. BlockExpr ::= Ident "=" Expr ;

-- list items

separator ListItem "," ;
ListItem. ListItem ::= Expr ;

-- record items

separator RecordItem "," ;
--terminator RecordItem "," ;
RecordItem. RecordItem ::= Def ;

-- function arguments

separator Arg "" ;
Arg. Arg ::= "(" Ident ":" TypeScheme ")" ;

-- definitions

separator Def ";" ;
DDef. Def ::= Ident [Arg] "=" Expr ;
DOpen. Def ::= "open" Ident ;

-- types

terminator TypeV "." ;
TypeV. TypeV ::= Ident ;

TypeScheme. TypeScheme ::= [TypeV] Type ;

TArrow. Type ::= Type1 "->" Type ;
TRecord. Type ::= "{" Ident "|" [FieldAnnotation] "}" ;
TInt. Type1 ::= "Int" ;
TVar. Type1 ::= Ident ;

FieldAnnotation. FieldAnnotation ::= Ident ":" Type ;
separator FieldAnnotation "," ;

coercions Type 1 ;
